
/*STEP 1: Create a table (SELF REFERENTIAL), with the following statement. The employee_id column gets generated automatically (as Identity column) */


DROP TABLE IF EXISTS EMPLOYEE;

CREATE TABLE EMPLOYEE(EMPLOYEE_ID SERIAL CONSTRAINT EMPLOYEE_PK1 PRIMARY KEY,
 EMPLOYEE_FIRST_NAME CHAR(60) NOT NULL,
 EMPLOYEE_MIDDLE_INITIAL CHAR(1), 
 EMPLOYEE_LAST_NAME CHAR(60) NOT NULL, 
 EMPLOYEE_DESIGNATION CHAR(80),
 MANAGER_ID BIGINT, CONSTRAINT EMPLOYEE_FK FOREIGN KEY (MANAGER_ID) REFERENCES EMPLOYEE(EMPLOYEE_ID)
);


/*Populate the table with some sample data*/

INSERT INTO EMPLOYEE 
(
 EMPLOYEE_FIRST_NAME,
 EMPLOYEE_MIDDLE_INITIAL,
 EMPLOYEE_LAST_NAME,
 EMPLOYEE_DESIGNATION,
 MANAGER_ID
 )
VALUES
('SEKHAR',NULL,'MEKALA', 'CEO', NULL);

INSERT INTO EMPLOYEE 
(
 EMPLOYEE_FIRST_NAME,
 EMPLOYEE_MIDDLE_INITIAL,
 EMPLOYEE_LAST_NAME,
 EMPLOYEE_DESIGNATION,
 MANAGER_ID
 )
VALUES
('DAVID','M','PAUL', 'CTO', 1);

INSERT INTO EMPLOYEE 
(
 EMPLOYEE_FIRST_NAME,
 EMPLOYEE_MIDDLE_INITIAL,
 EMPLOYEE_LAST_NAME,
 EMPLOYEE_DESIGNATION,
 MANAGER_ID
 )
VALUES
('CRAIG','P','MULLINS', 'CFO', 1);

INSERT INTO EMPLOYEE 
(
 EMPLOYEE_FIRST_NAME,
 EMPLOYEE_MIDDLE_INITIAL,
 EMPLOYEE_LAST_NAME,
 EMPLOYEE_DESIGNATION,
 MANAGER_ID
 )
VALUES
('NEERAJ','K','SHARMA', 'COO', 1);

INSERT INTO EMPLOYEE 
(
 EMPLOYEE_FIRST_NAME,
 EMPLOYEE_MIDDLE_INITIAL,
 EMPLOYEE_LAST_NAME,
 EMPLOYEE_DESIGNATION,
 MANAGER_ID
 )
VALUES
('YOGESH',NULL,'CHAWLA', 'SVP, HR', 1);

INSERT INTO EMPLOYEE 
(
 EMPLOYEE_FIRST_NAME,
 EMPLOYEE_MIDDLE_INITIAL,
 EMPLOYEE_LAST_NAME,
 EMPLOYEE_DESIGNATION,
 MANAGER_ID
 )
VALUES
('NIKITA',NULL,'GANDMAN', 'VP - DBA', 2);


INSERT INTO EMPLOYEE 
(
 EMPLOYEE_FIRST_NAME,
 EMPLOYEE_MIDDLE_INITIAL,
 EMPLOYEE_LAST_NAME,
 EMPLOYEE_DESIGNATION,
 MANAGER_ID
 )
VALUES
('PRAKASH',NULL,'JHA', 'VP - SYSTEMS', 2);

INSERT INTO EMPLOYEE 
(
 EMPLOYEE_FIRST_NAME,
 EMPLOYEE_MIDDLE_INITIAL,
 EMPLOYEE_LAST_NAME,
 EMPLOYEE_DESIGNATION,
 MANAGER_ID
 )
VALUES
('JEFF','O','HUNT', 'NETWORK - LEAD', 7);

INSERT INTO EMPLOYEE 
(
 EMPLOYEE_FIRST_NAME,
 EMPLOYEE_MIDDLE_INITIAL,
 EMPLOYEE_LAST_NAME,
 EMPLOYEE_DESIGNATION,
 MANAGER_ID
 )
VALUES
('ROBERT','L','COOK', 'ORACLE Competency lead', 6);


INSERT INTO EMPLOYEE 
(
 EMPLOYEE_FIRST_NAME,
 EMPLOYEE_MIDDLE_INITIAL,
 EMPLOYEE_LAST_NAME,
 EMPLOYEE_DESIGNATION,
 MANAGER_ID
 )
VALUES
('JOHN','B','LY', 'DB2 Competency lead', 6);

INSERT INTO EMPLOYEE 
(
 EMPLOYEE_FIRST_NAME,
 EMPLOYEE_MIDDLE_INITIAL,
 EMPLOYEE_LAST_NAME,
 EMPLOYEE_DESIGNATION,
 MANAGER_ID
 )
VALUES
('SIDDHANTH','S','SIDDHU', 'SQL SERVER Competency lead', 6);


INSERT INTO EMPLOYEE 
(
 EMPLOYEE_FIRST_NAME,
 EMPLOYEE_MIDDLE_INITIAL,
 EMPLOYEE_LAST_NAME,
 EMPLOYEE_DESIGNATION,
 MANAGER_ID
 )
VALUES
('ANNA','S','JACOB', 'Sr. DBA', 11);

INSERT INTO EMPLOYEE 
(
 EMPLOYEE_FIRST_NAME,
 EMPLOYEE_MIDDLE_INITIAL,
 EMPLOYEE_LAST_NAME,
 EMPLOYEE_DESIGNATION,
 MANAGER_ID
 )
VALUES
('SANTI','J','LEE', 'Sr. DBA', 9);



INSERT INTO EMPLOYEE 
(
 EMPLOYEE_FIRST_NAME,
 EMPLOYEE_MIDDLE_INITIAL,
 EMPLOYEE_LAST_NAME,
 EMPLOYEE_DESIGNATION,
 MANAGER_ID
 )
VALUES
('JACOB','L','SCHMIDT', 'VP', 3);


INSERT INTO EMPLOYEE 
(
 EMPLOYEE_FIRST_NAME,
 EMPLOYEE_MIDDLE_INITIAL,
 EMPLOYEE_LAST_NAME,
 EMPLOYEE_DESIGNATION,
 MANAGER_ID
 )
VALUES
('HANH','L','KIM', 'VP', 3);



/*The following query will give you all the data currently present in the table*/
SELECT * FROM EMPLOYEE;

/*The following query will display relationships between all the employees, along with the manager's ID, manager's first and manager's last name and manager's designation */
/*The report starts with CEO, and displays all the employees recurssively*/

/*QUERY 1:*/
WITH RECURSIVE ROOT (EMPLOYEE_ID,EMPLOYEE_FIRST_NAME,
EMPLOYEE_LAST_NAME,EMPLOYEE_DESIGNATION,MANAGER_ID, 
LEVEL,MANAGER_FIRST_NAME, MANAGER_LAST_NAME, MANAGER_DESIGNATION) 
AS
(
SELECT EMPLOYEE_ID,EMPLOYEE_FIRST_NAME,
EMPLOYEE_LAST_NAME,EMPLOYEE_DESIGNATION, 
MANAGER_ID, 1 AS LEVEL, 
EMPLOYEE_FIRST_NAME AS MANAGER_FIRST_NAME,
EMPLOYEE_LAST_NAME AS MANAGER_LAST_NAME,
EMPLOYEE_DESIGNATION AS MANAGER_DESIGNATION 
FROM 
EMPLOYEE WHERE MANAGER_ID IS NULL
UNION ALL
SELECT LEAF.EMPLOYEE_ID, LEAF.EMPLOYEE_FIRST_NAME, LEAF.EMPLOYEE_LAST_NAME, LEAF.EMPLOYEE_DESIGNATION,
LEAF.MANAGER_ID, (ROOT.LEVEL + 1)  AS LEVEL, ROOT.EMPLOYEE_FIRST_NAME, ROOT.EMPLOYEE_LAST_NAME, ROOT.EMPLOYEE_DESIGNATION MANAGER_DESIGNATION  
FROM ROOT, EMPLOYEE LEAF WHERE ROOT.EMPLOYEE_ID = LEAF.MANAGER_ID
) 
SELECT EMPLOYEE_ID,EMPLOYEE_FIRST_NAME,
EMPLOYEE_LAST_NAME,EMPLOYEE_DESIGNATION,MANAGER_ID,
CASE WHEN LEVEL= 1 then '---NONE---' ELSE MANAGER_FIRST_NAME END AS MANAGER_FIRST_NAME, 
CASE WHEN LEVEL= 1 then '---NONE---' ELSE MANAGER_LAST_NAME END AS MANAGER_LAST_NAME, 
CASE WHEN LEVEL= 1 then '---NONE---' ELSE MANAGER_DESIGNATION END AS MANAGER_DESIGNATION, 
LEVEL
 FROM ROOT
 ORDER BY LEVEL;




/* ADDITIONAL Queries*/

/*QUERY 2: To get all the managers above a particular employee ID, use this query. The employee ID must be supplied as input*/
WITH RECURSIVE ROOT (EMPLOYEE_ID,EMPLOYEE_FIRST_NAME,
EMPLOYEE_LAST_NAME,EMPLOYEE_DESIGNATION,MANAGER_ID, LEVEL) AS
(
  SELECT EMPLOYEE_ID,EMPLOYEE_FIRST_NAME,
EMPLOYEE_LAST_NAME,EMPLOYEE_DESIGNATION, 
MANAGER_ID, 1 AS LEVEL FROM 
/*Supply desired employee ID, for whom you would like to get all the managers above him. Here I used 13 as the employee ID.*/
EMPLOYEE WHERE EMPLOYEE_ID = 13
UNION ALL
SELECT LEAF.EMPLOYEE_ID AS MANAGER_ID, LEAF.EMPLOYEE_FIRST_NAME AS MANAGER_FIRST_NAME, LEAF.EMPLOYEE_LAST_NAME MANAGER_LAST_NAME, LEAF.EMPLOYEE_DESIGNATION AS MANAGER_TITLE,
LEAF.MANAGER_ID, (ROOT.LEVEL + 1)  AS LEVEL
FROM ROOT, EMPLOYEE LEAF WHERE ROOT.MANAGER_ID = LEAF.EMPLOYEE_ID
)
SELECT * FROM ROOT ORDER BY LEVEL DESC;

/* QUERY 3: To get all the employees below a particular employee ID, use this query. The employee ID must be supplied as input to the query*/

WITH RECURSIVE ROOT (EMPLOYEE_ID,EMPLOYEE_FIRST_NAME,
EMPLOYEE_LAST_NAME,EMPLOYEE_DESIGNATION,MANAGER_ID, LEVEL) AS
(
  SELECT EMPLOYEE_ID,EMPLOYEE_FIRST_NAME,
EMPLOYEE_LAST_NAME,EMPLOYEE_DESIGNATION, 
MANAGER_ID, 1 AS LEVEL FROM 
/*Supply desired employee ID, for whom you would like to get all the employees below him. Here I used 2 as the EMPLOYEE ID.*/
EMPLOYEE WHERE EMPLOYEE_ID = 2
UNION ALL
SELECT LEAF.EMPLOYEE_ID AS MANAGER_ID, LEAF.EMPLOYEE_FIRST_NAME AS MANAGER_FIRST_NAME, LEAF.EMPLOYEE_LAST_NAME MANAGER_LAST_NAME, LEAF.EMPLOYEE_DESIGNATION AS MANAGER_TITLE,
LEAF.MANAGER_ID, (ROOT.LEVEL + 1)  AS LEVEL
FROM ROOT, EMPLOYEE LEAF WHERE ROOT.EMPLOYEE_ID = LEAF.MANAGER_ID
)
SELECT * FROM ROOT ORDER BY LEVEL;




/*QUERY 4: To get all the reporting relationships between all employees, use this query. This query is similar to QUERY 1, 
but it does NOT show the manager's name, and manager's designation details, unlike in query 1 above*/


WITH RECURSIVE ROOT (EMPLOYEE_ID,EMPLOYEE_FIRST_NAME,
EMPLOYEE_LAST_NAME,EMPLOYEE_DESIGNATION,MANAGER_ID, LEVEL) AS
(
SELECT EMPLOYEE_ID,EMPLOYEE_FIRST_NAME,
EMPLOYEE_LAST_NAME,EMPLOYEE_DESIGNATION, 
MANAGER_ID, 1 AS LEVEL FROM 
EMPLOYEE WHERE MANAGER_ID IS NULL
UNION ALL
SELECT LEAF.EMPLOYEE_ID, LEAF.EMPLOYEE_FIRST_NAME, LEAF.EMPLOYEE_LAST_NAME, LEAF.EMPLOYEE_DESIGNATION,
LEAF.MANAGER_ID, (ROOT.LEVEL + 1)  AS LEVEL
FROM ROOT, EMPLOYEE LEAF WHERE ROOT.EMPLOYEE_ID = LEAF.MANAGER_ID
)
SELECT * FROM ROOT ORDER BY LEVEL;

